// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: book.proto

package bookie

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bookie_ListBooks_FullMethodName  = "/Bookie/ListBooks"
	Bookie_CreateBook_FullMethodName = "/Bookie/CreateBook"
)

// BookieClient is the client API for Bookie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookieClient interface {
	ListBooks(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBooksResponse, error)
	CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error)
}

type bookieClient struct {
	cc grpc.ClientConnInterface
}

func NewBookieClient(cc grpc.ClientConnInterface) BookieClient {
	return &bookieClient{cc}
}

func (c *bookieClient) ListBooks(ctx context.Context, in *ListBookRequest, opts ...grpc.CallOption) (*ListBooksResponse, error) {
	out := new(ListBooksResponse)
	err := c.cc.Invoke(ctx, Bookie_ListBooks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookieClient) CreateBook(ctx context.Context, in *CreateBookRequest, opts ...grpc.CallOption) (*CreateBookResponse, error) {
	out := new(CreateBookResponse)
	err := c.cc.Invoke(ctx, Bookie_CreateBook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookieServer is the server API for Bookie service.
// All implementations must embed UnimplementedBookieServer
// for forward compatibility
type BookieServer interface {
	ListBooks(context.Context, *ListBookRequest) (*ListBooksResponse, error)
	CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error)
	mustEmbedUnimplementedBookieServer()
}

// UnimplementedBookieServer must be embedded to have forward compatible implementations.
type UnimplementedBookieServer struct {
}

func (UnimplementedBookieServer) ListBooks(context.Context, *ListBookRequest) (*ListBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedBookieServer) CreateBook(context.Context, *CreateBookRequest) (*CreateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBook not implemented")
}
func (UnimplementedBookieServer) mustEmbedUnimplementedBookieServer() {}

// UnsafeBookieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookieServer will
// result in compilation errors.
type UnsafeBookieServer interface {
	mustEmbedUnimplementedBookieServer()
}

func RegisterBookieServer(s grpc.ServiceRegistrar, srv BookieServer) {
	s.RegisterService(&Bookie_ServiceDesc, srv)
}

func _Bookie_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookieServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookie_ListBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookieServer).ListBooks(ctx, req.(*ListBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bookie_CreateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookieServer).CreateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bookie_CreateBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookieServer).CreateBook(ctx, req.(*CreateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bookie_ServiceDesc is the grpc.ServiceDesc for Bookie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bookie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Bookie",
	HandlerType: (*BookieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBooks",
			Handler:    _Bookie_ListBooks_Handler,
		},
		{
			MethodName: "CreateBook",
			Handler:    _Bookie_CreateBook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book.proto",
}
